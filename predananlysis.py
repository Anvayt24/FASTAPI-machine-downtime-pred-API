# -*- coding: utf-8 -*-
"""predananlysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zmJ8MD430JExEL12oX-87KwiLcWyE91j
"""

!pip install fastapi

from fastapi import FastAPI, UploadFile, File
from pydantic import BaseModel
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, f1_score
import os

model=0
data=0

app = FastAPI()

!pip install python-multipart

#loading dataset
@app.post("/upload")
async def upload_file(file: UploadFile = File(...)):
    global data
    if file.filename.endswith(".csv"):
        data = pd.read_csv(file.file)
        return {"message": "file uploaded successfully", "columns": data.columns.tolist()}
    else:
        return {"no file uploaded/wrong file format"}

@app.post("/train")
async def train_model():
    global model, data
    x = data.drop(columns = ['Downtime'])
    y = data['Downtime']
    x_train , x_test , y_train , y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)

    model = LogisticRegression()
    model.fit(x_train, y_train)

    y_pred = model.predict(x_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred , average='binary')
    return {"accuracy": accuracy, "f1_score": f1}

import joblib

joblib.dump(model, 'model.pkl')

class PredictionInput(BaseModel):
    Assembly_Line_No: int
    Hydraulic_Pressure: float
    Coolant_Pressure: float
    Air_System_Pressure: float
    Coolant_Temperature: float
    Hydraulic_Oil_Temperature: float
    Spindle_Bearing_Temperature: float
    Spindle_Vibration: float
    Tool_Vibration: float
    Spindle_Speed: int
    Voltage: float
    Torque: float
    Cutting: float

@app.post("/predict")
async def predict(input: PredictionInput):
    global model
    if model is None :
        if os.path.exists('model.pkl'):
            model = joblib.load('model.pkl')
        else:
            return {"message": "model not found"}
    input_data = np.array [[
        input.Assembly_Line_No,
        input.Hydraulic_Pressure,
        input.Coolant_Pressure,
        input.Air_System_Pressure,
        input.Coolant_Temperature,
        input.Hydraulic_Oil_Temperature,
        input.Spindle_Bearing_Temperature,
        input.Spindle_Vibration,
        input.Tool_Vibration,
        input.Spindle_Speed,
        input.Voltage,
        input.Torque,
        input.Cutting
    ]]
    prediction = model.predict(input_data)[0]
    confidence = model.predict_proba(input_data).max()
    return {"Downtime": "Yes" if prediction == 1 else "No", "Confidence": round(confidence, 2)}

@app.get("/")
async def root():
  return {"message": "api is running "}

!pip install uvicorn
!pip install pyngrok

import nest_asyncio
from pyngrok import ngrok
import uvicorn
nest_asyncio.apply()
ngrok.set_auth_token("2mvLFiwDjRpAvMmxyfFocPfLHD6_5Bw2mj2uBiQHMAXRfkqq7")

public_url = ngrok.connect(8000)
print(f"Public URL: {public_url}")

uvicorn.run(app, host="0.0.0.0", port=8000)